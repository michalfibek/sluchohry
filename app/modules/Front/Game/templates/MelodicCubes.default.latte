{block content}

<header>
<h1 n:block="title">Melodic cubes <small>{$song->artist} - {$song->title}</small></h1>
</header>

<div class="game-main hidden">
    <button type="button" class="btn btn-default" id="ex1-play-current"><span class="fa fa-play"></span> Play by given order</button>
    <button type="button" class="btn btn-default" id="ex1-play-original">Play original</button>
    <button type="button" class="btn btn-default" id="ex1-pause"><span class="fa fa-pause"></span> Pause</button>
    <button type="button" class="btn btn-default" id="ex1-stop"><span class="fa fa-stop"></span> Stop</button>
    <br />&nbsp;<br />

    <div class="container-fluid">
        <div class="row" id="play-cubes">
            {for $i = 0; $i < count($markers); $i++}
            <div class="col-xs-3 col-md-1 single-cube cube-plain" id="part{$shuffledOrder[$i]}"><button type="button" class="btn btn-default" id="song-part{$shuffledOrder[$i]}" data-duration="{$markers[$shuffledOrder[$i]][1]}">Play {$shuffledOrder[$i]}</button></div>
            {/for}
        </div>
    </div>
</div>
<div class="spinner">
    <div class="rect1"></div>
    <div class="rect2"></div>
    <div class="rect3"></div>
    <div class="rect4"></div>
    <div class="rect5"></div>
</div>

{/block}


{block scripts}
{include parent}
        <script src="{$basePath}/assets/vendor/Sortable/jquery.fn.sortable.js"></script>
        <script type="text/javascript">
            $(function(){
                var cubeBank = [],
                    song1,
                    songCubesChain,
                    arrayMove,
                    playChain,
                    songSource = {$song},
                    songUrl = '/assets/sounds/songs/{$song->filename|noescape}.mp3';
                    markers = {$markers},
                    shuffledOrder = {$shuffledOrder},
                    stopPlay = false;

                /**
                 * Moves item in array by key position
                 * @param array
                 * @param from
                 * @param to
                 */
                arrayMove = function(arr, from, to) {
                    arr.splice(to, 0, arr.splice(from, 1)[0]);
                };

                /**
                 * Define array of current play cubes' order on page
                 */
                {for $i = 0; $i < count($markers); $i++}
                    cubeBank[{$i}] = 'part{$shuffledOrder[$i]}';
                {/for}

                /**
                 * Define all clickable buttons
                 */
                {for $i = 0; $i < count($markers); $i++}
                $('#song-part{$i}').on('click', function(){
                    $('[id^=song').parent().removeClass('cube-highlight');
                    song1.stop().play('part{$i}');
                    $(this).parent().addClass('cube-highlight');
                });
                {/for}

                $('#ex1-play-current').on('click', function(){
                    songCubesChain[0](playChain(1));

                });
                $('#ex1-play-original').on('click', function(){
                    song1.stop().play('complete');
                });
                $('#ex1-pause').on('click', function(){
                    song1.pause();
                });
                $('#ex1-stop').on('click', function(){
                    song1.stop();
                    stopPlay = true;
                    $('[id^=song').parent().removeClass('cube-highlight');
                });

                song1 = new Howl({
                    src: songUrl,
                    sprite: {
                        {for $i = 0; $i < count($markers); $i++}
                        part{$i}: [{$markers[$i][0]}, {$markers[$i][1]}],
                        {/for}
                        complete: [0, {$song->duration}]
                    },
                    onload: function() { // after sound file loads, do these...
                        show();
                    }
                });

                show = function() {
                    $(".spinner").transition({ opacity: 0 }, 300, function() {
                        this.hide();
                        $(".game-main").removeClass('hidden').transition({ opacity: 1 }, 300, function() {
                            this.show();
                        });
                    });
                }

                songCubesChain = [
                        function(fn) {
                            stopPlay = false;
                            fn();
                        },
                    {for $i = 0; $i < count($markers); $i++}
                        function(fn) {
                            if (stopPlay == false) {
                                {if $i != 0}
                                    $('#song-' + cubeBank[{$i-1}]).parent().removeClass('cube-highlight');
                                {/if}
                                song1.play(cubeBank[{$i}]);
                                $('#song-'+cubeBank[{$i}]).parent().addClass('cube-highlight');
                                setTimeout(fn, $('#song-'+cubeBank[{$i}]).data('duration')); // gets cube playtime from html5 data field
                            };
                        }{if $i+1 != count($markers)},{/if}
                    {/for}
                ];

                playChain = function (i) {
//                    console.log('playing:'+i);
                    return function () {
                        if (songCubesChain[i]) {
                            songCubesChain[i](playChain(++i));
                        };
                    };
                };

                $("#play-cubes").sortable({
                    animation: 150,
                    onEnd: function(evt) {
                        evt.oldIndex;  // element's old index within parent
                        evt.newIndex;  // element's new index within parent
                        arrayMove(cubeBank, evt.oldIndex, evt.newIndex);
//                        console.log(cubeBank[evt.oldIndex] + ' -> ' + cubeBank[evt.newIndex]);
                    }
                }); // sortable init

            });



        </script>
{/block}
