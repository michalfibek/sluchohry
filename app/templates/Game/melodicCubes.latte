{block content}

<h1 n:block="title">Hudebn√≠ kostky</h1>


<button id="ex1-play-current">Play by given order</button> <button id="ex1-play-original">Play original</button> <button id="ex1-pause">Pause</button> <button id="ex1-stop">Stop</button>
<br />&nbsp;<br /> {$song->author} - {$song->title}

<div class="row hidden" id="play-cubes">
    {for $i = 0; $i< $splitCount; $i++}
    <div class="col-md-3 single-cube" id="part{$shuffledOrder[$i]}"><button id="song-part{$shuffledOrder[$i]}">Play {$shuffledOrder[$i]}</button></div>
    {/for}
</div>

{/block}


{block scripts}
{include parent}
        <script src="{$basePath}/assets/vendor/Sortable/jquery.fn.sortable.js"></script>
        <script type="text/javascript">
            $(function(){
                var cubeBank = [],
                    song1,
                    songCubesChain,
                    arrayMove,
                    cubesOrder,
                    getCubesCurOrder,
                    playChain,
                    stopPlay = false;

                /**
                 * Moves item in array by key position
                 * @param from
                 * @param to
                 */
                Array.prototype.move = function(from, to) {
                    this.splice(to, 0, this.splice(from, 1)[0]);
                };

                /**
                 * Define array of current play cubes' order on page
                 */
                {for $i = 0; $i < $splitCount; $i++}
                cubeBank[{$i}] = 'part{$shuffledOrder[$i]}';
                {/for}

                /**
                 * Define all clickable buttons
                 */
                {for $i = 0; $i < $splitCount; $i++}
                $('#song-part{$i+1}').on('click', function(){
                    song1.stop().play('part{$i+1}');
                });
                {/for}

                $('#ex1-play-current').on('click', function(){
//                    cubesOrder = getCubesCurOrder($(".single-cube").get());
//                    console.log(cubesOrder);
//                    var g = getCubesCurOrder(cubeBank);
                    songCubesChain[0](playChain(1));

                });
                $('#ex1-play-original').on('click', function(){
                    song1.stop().play('complete');
                });
                $('#ex1-pause').on('click', function(){
                    song1.pause();
                });
                $('#ex1-stop').on('click', function(){
                    song1.stop();
                    stopPlay = true;
                });

                song1 = new Howl({
                    src: ['/assets/sounds/songs/{$song->filename|noescape}.mp3'],
                    sprite: {
                        {for $i = 0; $i< $splitCount; $i++}
                        part{$i+1}: [{$i*$splitDuration}, {$splitDuration}],
                        {/for}
                        complete: [0, {$song->duration}]
                    },
                    onload: function() { // after sound file loads, do these...
                        $("#play-cubes:hidden").fadeIn(150).removeClass("hidden");
                    }
                });

                songCubesChain = [
                        function(fn) {
                            stopPlay = false;
                            fn();
                        },
                    {for $i = 0; $i < $splitCount; $i++}
                        function(fn) {
                            if (stopPlay == false) {
                                song1.play(cubeBank[{$i}]);
                                setTimeout(fn, {$splitDuration});
                            };
                        }{if $i+1 != $splitCount},{/if}
                    {/for}
                ];

                playChain = function (i) {
                    console.log('playing:'+i);
                    return function () {
                        if (songCubesChain[i]) {
                            songCubesChain[i](playChain(++i));
                        } else {
                            console.log('play finished');
                        }
                    };
                };

                getCubesCurOrder = function ( bank ) {
                    for (var i = 0; i < bank.length; i++) {
                        console.log(bank[i]);
                    }
                };

                $("#play-cubes").sortable({
                    animation: 150,
                    onEnd: function(evt) {
                        evt.oldIndex;  // element's old index within parent
                        evt.newIndex;  // element's new index within parent
                        cubeBank.move(evt.oldIndex, evt.newIndex);
//                        console.log(evt.oldIndex + ' -> ' + evt.newIndex);
                    }
                }); // sortable init

            });



        </script>
{/block}
